#pragma once

/*
 * This is based on the Azure IoT Hub sample for ESPRESSIF ESP8266 board.
 * It uses our Azure Embedded SDK for C to help interact with Azure IoT.
 * For reference, please visit https://github.com/azure/azure-sdk-for-c.
 *
 * To connect and work with Azure IoT Hub you need an MQTT client, connecting, subscribing
 * and publishing to specific topics to use the messaging features of the hub.
 * Our azure-sdk-for-c is an MQTT client support library, helping to compose and parse the
 * MQTT topic names and messages exchanged with the Azure IoT Hub.
 *
 * This code performs the following tasks:
 * - Synchronize the device clock with a NTP server;
 * - Initialize our "az_iot_hub_client" (struct for data, part of our azure-sdk-for-c);
 * - Initialize the MQTT client (here we use Nick Oleary's PubSubClient, which also handle the tcp
 * connection and TLS);
 * - Connect the MQTT client (using server-certificate validation, SAS-tokens for client
 * authentication);
 * - Periodically send telemetry data to the Azure IoT Hub.
 *
 * To properly connect to your Azure IoT Hub, please fill the information in the `secrets.h`
 * file.
 */

// Config variables like wifi password
#include "secrets.h"
// Publish 1 message every 5 seconds
#define IOT_CONFIG_TELEMETRY_FREQUENCY_MS 5000 
// How long a SAS token generated by the sample will be valid, in minutes.
// The sample will stop working after the SAS token is expired, requiring the device to be reset.
#define IOT_CONFIG_SAS_TOKEN_EXPIRY_MINUTES 60
// Time Zone Offset
#define IOT_CONFIG_TIME_ZONE -8
#define IOT_CONFIG_TIME_ZONE_DAYLIGHT_SAVINGS_DIFF 1
#define IOT_CONFIG_DAYLIGHT_SAVINGS true
// follow the format '(ard;<platform>)'
#define AZURE_SDK_CLIENT_USER_AGENT "c%2F" AZ_SDK_VERSION_STRING "(ard;esp8266)"

// Utility macros and defines
#define LED_PIN 2
#define sizeofarray(a) (sizeof(a) / sizeof(a[0]))
#define ONE_HOUR_IN_SECS 3600
#define NTP_SERVERS "pool.ntp.org", "time.nist.gov"
#define MQTT_PACKET_SIZE 1024

// Auxiliary functions
void connectToWiFi();
void initializeTime();
char *getCurrentLocalTimeString();
void printCurrentTime();
void receivedCallback(char *topic, byte *payload, unsigned int length);
void initializeClients();
/*
 * @brief           Gets the number of seconds since UNIX epoch until now.
 * @return uint32_t Number of seconds.
 */
uint32_t getSecondsSinceEpoch();
int generateSasToken(char *sas_token, size_t size);
int connectToAzureIoTHub();
void establishConnection();
char *getTelemetryPayload(char *payload);
void sendTelemetry(char *payload);

// main functions
void azure_setup();
void azure_loop(char *payload);